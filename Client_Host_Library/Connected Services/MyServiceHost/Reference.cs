//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Host_Library.MyServiceHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceHost.INotification_Service", CallbackContract=typeof(Client_Host_Library.MyServiceHost.INotification_ServiceCallback))]
    public interface INotification_Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Connect", ReplyAction="http://tempuri.org/INotification_Service/ConnectResponse")]
        int Connect(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Connect", ReplyAction="http://tempuri.org/INotification_Service/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Dissonnect", ReplyAction="http://tempuri.org/INotification_Service/DissonnectResponse")]
        void Dissonnect(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Dissonnect", ReplyAction="http://tempuri.org/INotification_Service/DissonnectResponse")]
        System.Threading.Tasks.Task DissonnectAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/SendMsg")]
        void SendMsg(string chek_Id, string phone);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string chek_Id, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotification_ServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/MsgCallback")]
        void MsgCallback(string chek_Id, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotification_ServiceChannel : Client_Host_Library.MyServiceHost.INotification_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Notification_ServiceClient : System.ServiceModel.DuplexClientBase<Client_Host_Library.MyServiceHost.INotification_Service>, Client_Host_Library.MyServiceHost.INotification_Service {
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name, string surname) {
            return base.Channel.Connect(name, surname);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name, string surname) {
            return base.Channel.ConnectAsync(name, surname);
        }
        
        public void Dissonnect(int Id) {
            base.Channel.Dissonnect(Id);
        }
        
        public System.Threading.Tasks.Task DissonnectAsync(int Id) {
            return base.Channel.DissonnectAsync(Id);
        }
        
        public void SendMsg(string chek_Id, string phone) {
            base.Channel.SendMsg(chek_Id, phone);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string chek_Id, string phone) {
            return base.Channel.SendMsgAsync(chek_Id, phone);
        }
    }
}
