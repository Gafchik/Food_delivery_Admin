//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Host_Library.MyServiceHost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Type_Msg", Namespace="http://schemas.datacontract.org/2004/07/Host.Server_Lib")]
    [System.SerializableAttribute()]
    public partial class Type_Msg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msg_TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string msg_textField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg_Title {
            get {
                return this.msg_TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.msg_TitleField, value) != true)) {
                    this.msg_TitleField = value;
                    this.RaisePropertyChanged("msg_Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg_text {
            get {
                return this.msg_textField;
            }
            set {
                if ((object.ReferenceEquals(this.msg_textField, value) != true)) {
                    this.msg_textField = value;
                    this.RaisePropertyChanged("msg_text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceHost.INotification_Service", CallbackContract=typeof(Client_Host_Library.MyServiceHost.INotification_ServiceCallback))]
    public interface INotification_Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Connect", ReplyAction="http://tempuri.org/INotification_Service/ConnectResponse")]
        int Connect(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Connect", ReplyAction="http://tempuri.org/INotification_Service/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Dissonnect", ReplyAction="http://tempuri.org/INotification_Service/DissonnectResponse")]
        void Dissonnect(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotification_Service/Dissonnect", ReplyAction="http://tempuri.org/INotification_Service/DissonnectResponse")]
        System.Threading.Tasks.Task DissonnectAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/SendMsg")]
        void SendMsg(Client_Host_Library.MyServiceHost.Type_Msg type, string chek_Id, string phone);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(Client_Host_Library.MyServiceHost.Type_Msg type, string chek_Id, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotification_ServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotification_Service/MsgCallback")]
        void MsgCallback(Client_Host_Library.MyServiceHost.Type_Msg type, string chek_Id, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotification_ServiceChannel : Client_Host_Library.MyServiceHost.INotification_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Notification_ServiceClient : System.ServiceModel.DuplexClientBase<Client_Host_Library.MyServiceHost.INotification_Service>, Client_Host_Library.MyServiceHost.INotification_Service {
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Notification_ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name, string surname) {
            return base.Channel.Connect(name, surname);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name, string surname) {
            return base.Channel.ConnectAsync(name, surname);
        }
        
        public void Dissonnect(int Id) {
            base.Channel.Dissonnect(Id);
        }
        
        public System.Threading.Tasks.Task DissonnectAsync(int Id) {
            return base.Channel.DissonnectAsync(Id);
        }
        
        public void SendMsg(Client_Host_Library.MyServiceHost.Type_Msg type, string chek_Id, string phone) {
            base.Channel.SendMsg(type, chek_Id, phone);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(Client_Host_Library.MyServiceHost.Type_Msg type, string chek_Id, string phone) {
            return base.Channel.SendMsgAsync(type, chek_Id, phone);
        }
    }
}
